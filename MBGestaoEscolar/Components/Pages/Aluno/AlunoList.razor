@page "/alunos"
@using MBGestaoEscolar.Entities
@using MBGestaoEscolar.Services.Interfaces
@using MudBlazor
@inject IAlunoService AlunoService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudCard>
	<MudCardContent>
		<MudText Typo="Typo.h6" Class="mb-4"></MudText>
		<MudPaper Class="d-flex justify-end flex-grow-1 mb-6" Elevation="0">
			<MudButton Color="Color.Primary"
					   Variant="Variant.Filled"
					   StartIcon="@Icons.Material.Filled.Add"
					   Disabled="@(_dialogOpen)"
					   OnClick="() => ShowDialog(string.Empty)">
				Adicionar o Novo Aluno
			</MudButton>
		</MudPaper>
		<MudDataGrid Items="@_alunos"
					 SortMode="SortMode.Multiple"
					 Hover="true">
			<Columns>
				<PropertyColumn Property="x => x.AlunoId" Title="ID"></PropertyColumn>
				<PropertyColumn Property="x => x.Matricula" Title="Matricula"></PropertyColumn>
				<PropertyColumn Property="x => x.Nome" Title="Nome"></PropertyColumn>
				<PropertyColumn Property="x => x.CPF" Title="CPF"></PropertyColumn>
				<PropertyColumn Property="x => x.Email" Title="Email"></PropertyColumn>
				<PropertyColumn Property="x => x.Telefone" Title="Telefone"></PropertyColumn>
				<PropertyColumn Property="x => x.DataNascimento" Title="Data Nascimento" Format="dd/MM/yyyy"></PropertyColumn>
				<PropertyColumn Property="x => x.StatusAluno" Title="Status"></PropertyColumn>
				<PropertyColumn Property="x => x.DataCadastro" Title="Data Cadastro" Format="dd/MM/yyyy"></PropertyColumn>
				<TemplateColumn StickyRight="true" Title="Ações">
					<CellTemplate>
						<MudIconButton Color="Color.Primary"
									   Icon="@Icons.Material.Filled.Edit"
									   Size="Size.Small"
									   OnClick="() => ShowDialog(context.Item.AlunoId.ToString())"></MudIconButton>

						<MudIconButton Color="Color.Secondary"
									   Icon="@Icons.Material.Filled.Delete"
									   Size="Size.Small"
									   OnClick="() => ConfirmaExclusaoAluno(context.Item)"></MudIconButton>
					</CellTemplate>
				</TemplateColumn>
			</Columns>
			<PagerContent>
				<MudDataGridPager T="Aluno" />
			</PagerContent>
		</MudDataGrid>
	</MudCardContent>
</MudCard>

@code {
	private List<Aluno> _alunos = new();
	private bool _dialogOpen;

	private readonly DialogOptions _dialogOptions = new DialogOptions
		{
			CloseButton = true,
			MaxWidth = MaxWidth.Medium,
			FullWidth = true
		};
	protected override async Task OnInitializedAsync()
	{
		try
		{
			_alunos = (await AlunoService.ListarAlunosAsync()).ToList();
		}
		catch (Exception e)
		{
			Snackbar.Add($"Erro ao carregar a lista de aluno:  {e.Message}", Severity.Error);
		}
	}
	private async Task ShowDialog(string idAluno)
	{
		_dialogOpen = true;
		var parameters = new DialogParameters();

		if (!string.IsNullOrEmpty(idAluno))
		{
			var aluno = _alunos.FirstOrDefault(x => x.AlunoId.ToString() == idAluno);
			parameters.Add("Aluno", aluno);
			parameters.Add("Title", "Editar Aluno");
		}
		else
		{
			parameters.Add("Aluno", new Aluno());
			parameters.Add("Title", "Novo Aluno");
		}

		var dialog = DialogService.Show<AlunoDialog>(
		parameters["Title"]!.ToString(),
		parameters,
		_dialogOptions);

		var result = await dialog.Result;
		_dialogOpen = false;
		if (!result.Canceled)
		{
			_alunos = (await AlunoService.ListarAlunosAsync()).ToList();
			StateHasChanged();
		}
	}

	private async Task ConfirmaExclusaoAluno(Aluno aluno)
	{
		var confirmed = await DialogService.ShowMessageBox(
		"Confirmação de Exclusão",
		$"Deseja realmente excluir o aluno {aluno.Nome} (Matricula {aluno.Matricula})?",
		yesText: "Sim",
		cancelText: "Não"
		);
		if (confirmed == true)
		{
			await AlunoService.ExcluirAsync(aluno.AlunoId);
			_alunos = (await AlunoService.ListarAlunosAsync()).ToList();
			Snackbar.Add($"Aluno '{aluno.Nome}' removido com sucesso!", Severity.Success);
			StateHasChanged();
		}
	}
}
